version: '3.7'

services:
  ### Frontend Application #############################
  client:
    image: ${PROJECT}_client:latest
    container_name: ${PROJECT}-client
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    expose:
      - "4000"
    ports:
      - "4000:4000"
    volumes:
      # Binds the application folder from the host inside the container for fast changes
      - ./client:/usr/src/app
      # Ignores/Hides the node_modules from the bind on the host allowing the node_modules
      # from inside the container to be used instead
      - /usr/src/app/node_modules
    depends_on:
      - server
    networks:
      - frontend

  ### Backend Application #############################
  server:
    image: ${PROJECT}-server:latest
    container_name: ${PROJECT}-server
    build:
      context: ./server
      dockerfile: Dockerfile.dev
      args:
        VERSION: ${COMMIT_SHA}
    environment:
      - DB_SERVER=${DB_SERVER}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - VERSION=${COMMIT_SHA}
    expose:
      - "80"
    ports:
      - "80:80"
      - "9229:9229"
    volumes:
      # Binds the application folder from the host inside the container for fast changes
      - ./server:/usr/src/app
      # Ignores/Hides the node_modules from the bind on the host allowing the node_modules
      # from inside the container to be used instead
      - /usr/src/app/node_modules
    depends_on:
      - mongodb
    networks:
      - frontend
  
  ### Lambda Function #############################
  lambda:
    container_name: ${PROJECT}-lambda
    image: lambci/lambda:nodejs12.x
    expose:
      - "9001"
    ports:
      - "9001:9001"
    environment:
      - DB_SERVER=${DB_SERVER}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - AWS_DEFAULT_REGION=ca-central-1
      - DOCKER_LAMBDA_WATCH=1
      - DOCKER_LAMBDA_STAY_OPEN=1
    depends_on:
      - mongodb
    volumes:
      - ./server/lambda:/var/task:ro,delegated
    command: index.handler
    networks:
      - frontend

  ### MongoDB #############################
  mongodb:
    container_name: ${PROJECT}-mongodb
    image: mongo:3.6-xenial
    restart: always
    expose:
      - ${DB_PORT}
    ports:
        - ${DB_PORT}:${DB_PORT}
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${DB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${DB_PASSWORD}
      - MONGO_INITDB_DATABASE=${DB_NAME}
    volumes:
      - ./.docker/mongo/databaseInit:/docker-entrypoint-initdb.d
      - ets-mongo-data-configdb:/data/configdb
      - ets-mongo-data-db:/data/db
    networks:
      - frontend

networks:
  frontend:
    driver: "bridge"

volumes:
    ets-mongo-data-configdb:
    ets-mongo-data-db:
